\chapter{操作系统的发展和功能}
\section{基本简介}
操作系统（英语：Operating System，简称OS）是管理计算机硬件与软件资源的程序，同时也是计算机系统的核心与基石。操作系统身负诸如管理与配置内存、决定系统资源供需的优先次序、控制输入与输出设备、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作接口。 操作系统的型态非常多样，不同机器安装的操作系统可从简单到复杂，可从手机的嵌入式系统到超级计算机的大型操作系统。许多操作系统制造者对它涵盖范畴的定义也不尽一致，例如有些操作系统集成了图形用户界面，而有些仅使用文字接口，而将图形接口视为一种非必要的应用程序。
操作系统理论在计算机科学中，为历史悠久而又活跃的分支；而操作系统的设计与实现则是软件工业的基础与核心。
\section{操作系统的历史}
\subsection{1980年代前}
第一部计算机并没有操作系统。这是由于早期计算机的创建方式（如同建造机械算盘）与效能不足以运行如此程序。但在1947年发明了晶体管，以及莫里斯·威尔克斯发明的微程序方法，使得计算机不再是机械设备，而是电子产品。系统管理工具以及简化硬件操作流程的程序很快就出现了，且成为操作系统的滥觞。到了1960年代早期，商用计算机制造商制造了批量处理系统，此系统可将工作的建置、调度以及运行串行化。此时，厂商为每一台不同型号的计算机创造不同的操作系统，因此为某计算机而写的程序无法移植到其他计算机上运行，即使是同型号的计算机也不行。
\paragraph{}
\indent
到了1964年，IBM System/360推出了一系列用途与价位都不同的大型机，而它们都共用代号为OS/360的操作系统（而非每种产品都用量身订做的操作系统）。让单一操作系统适用于整个系列的产品是System/360成功的关键，且实际上IBM目前的大型系统便是此系统的后裔；为System/360所写的应用程序依然可以在现代的IBM机器上运行！
\paragraph{}
OS/360也包含另一个优点：永久贮存设备—硬盘驱动器的面世（IBM称为DASD（Direct access storage device））。另一个关键是分时概念的创建：将大型机珍贵的时间资源适当分配到所有用户身上。分时也让用户有独占整部机器的感觉；而Multics的分时系统是此时众多新操作系统中实践此观念最成功的。
\paragraph{}
1963年，奇异公司与贝尔实验室合作以PL/I语言创建的Multics[1]，是激发1970年代众多操作系统创建的灵感来源，尤其是由AT&T贝尔实验室的丹尼斯·里奇与肯·汤普逊所创建的Unix系统，为了实践平台移植能力，此操作系统在1973年由C语言重写；另一个广为市场采用的小型计算机操作系统是VMS。
\subsection{1980年代}
第一代微型计算机并不像大型机或小型计算机，没有装设操作系统的需求或能力；它们只需要最基本的操作系统，通常这种操作系统都是从ROM读取的，此种程序被称为监视程序（Monitor）。1980年代，家用计算机开始普及。通常此时的计算机拥有8-bit处理器加上64KB存储器、屏幕、键盘以及低音质喇叭。而80年代早期最著名的套装计算机为使用微处理器6510（6502芯片特别版）的Commodore C64。此计算机没有操作系统，而是以一8KB只读存储器BIOS初始化彩色屏幕、键盘以及软盘驱动器和打印机。它可用8KB只读存储器BASIC语言来直接操作BIOS，并依此撰写程序，大部分是游戏。此BASIC语言的解释器勉强可算是此计算机的操作系统，当然就没有核心或软硬件保护机制了。此计算机上的游戏大多跳过BIOS层次，直接控制硬件。
\paragraph{}
早期最著名的磁盘启动型操作系统是CP/M，它支持许多早期的微计算机，且被MS-DOS大量抄袭其功能。最早期的IBM PC其架构类似C64。当然它们也使用了BIOS以初始化与抽象化硬件的操作，甚至也附了一个BASIC解释器！但是它的BASIC优于其他公司产品的原因在于他有可携性，并且兼容于任何符合IBM PC架构的机器上。这样的PC可利用Intel-8088处理器（16-bit暂存器）寻址，并最多可有1MB的存储器，然而最初只有640KB。软式磁盘驱动器取代了过去的磁带机，成为新一代的存储设备，并可在他512KB的空间上读写。为了支持更进一步的文件读写概念，磁盘操作系统（Disk Operating System，DOS）因而诞生。此操作系统可以合并任意数量的扇区，因此可以在一张磁盘片上放置任意数量与大小的文件。文件之间以文件名区别。IBM并没有很在意其上的DOS，因此以向外部公司购买的方式取得操作系统。1980年微软公司利用骗术[2]取得了与IBM的合约，并且收购了一家公司出产的操作系统，在将之修改后以MS-DOS的名义出品，此操作系统可以直接让程序操作BIOS与文件系统。到了Intel-80286处理器的时代，才开始实现基本的存储设备保护措施。MS-DOS的架构并不足以满足所有需求，因为它同时只能运行最多一个程序（如果想要同时运行程序，只能使用ISR(中断处理程序)的方式来跳过OS而由程序自行处理多任务的部份），且没有任何存储器保护措施。对驱动程序的支持也不够完整，因此导致诸如音效设备必须由程序自行设置的状况，造成不兼容的情况所在多有。某些操作的效能也是可怕地糟糕。许多应用程序因此跳过MS-DOS的服务程序，而直接访问硬件设备以取得较好的效能。虽然如此，但MS-DOS还是变成了IBM PC上面最常用的操作系统（IBM自己也有推出DOS，称为IBM-DOS或PC-DOS）。MS-DOS的成功使得微软成为地球上最赚钱的公司之一。
\paragraph{}
而1980年代另一个崛起的操作系统异数是Mac OS，此操作系统紧紧与麦金塔计算机捆绑在一起。此时一位施乐伯拉图实验室的员工Dominik Hagen访问了苹果计算机的史提夫·贾伯斯，并且向他展示了此时施乐发展的图形用户界面。苹果计算机惊为天人，并打算向施乐购买此技术，但因伯拉图实验室并非商业单位而是研究单位，因此施乐回绝了这项买卖。在此之后苹果一致认为个人计算机的未来必定属于图形用户界面，因此也开始发展自己的图形化操作系统。现今许多我们认为是基本要件的图形化接口技术与规则，都是由苹果计算机打下的基础（例如下拉式菜单、桌面图标、拖曳式操作与双点击等）。但正确来说，图形用户界面的确是施乐创始的。
\subsection{1990年代至今}
延续1980年代的竞争，1990年代出现了许多影响未来个人计算机市场深厚的操作系统。由于图形用户界面日趋繁复，操作系统的能力也越来越复杂与巨大，因此强韧且具有弹性的操作系统就成了迫切的需求。此年代是许多套装类的个人计算机操作系统互相竞争的时代。
\paragraph{}
上一年代于市场崛起的苹果计算机，由于旧系统的设计不良，使得其后继发展不力，苹果计算机决定重新设计操作系统。经过许多失败的项目后，苹果于1997年释出新操作系统——Mac OS X的测试版，而后推出的正式版取得了巨大的成功。让原先失意离开苹果的史提夫·贾伯斯风光再现。
\paragraph{}
除了商业主流的操作系统外，从1980年代起在开放原码的世界中，BSD系统也发展了非常久的一段时间，但在1990年代由于与AT&T的法律争端，使得远在芬兰赫尔辛基大学的另一股开源操作系统——Linux兴起。Linux核心是一个标准POSIX核心，其血缘可算是Unix家族的一支。Linux与BSD家族都搭配GNU计划所发展的应用程序，但是由于使用的许可证以及历史因素的作弄下，Linux取得了相当可观的开源操作系统市占率，而BSD则小得多。相较于MS-DOS的架构，Linux除了拥有傲人的可移植性（相较于Linux，MS-DOS只能运行在Intel CPU上），它也是一个分时多进程核心，以及良好的存储器空间管理（普通的进程不能访问核心区域的存储器）。想要访问任何非自己的存储器空间的进程只能通过系统调用来达成。一般进程是处于用户模式（User mode）底下，而运行系统调用时会被切换成核心模式（Kernel mode），所有的特殊指令只能在核心模式运行，此措施让核心可以完美管理系统内部与外部设备，并且拒绝无权限的进程提出的请求。因此理论上任何应用程序运行时的错误，都不可能让系统崩溃（Crash）。
\paragraph{}
另一方面，微软对于更强力的操作系统呼声的回应便是Windows NT于1999年的面世。
\paragraph{}
1983年开始微软就想要为MS-DOS建构一个图形化的操作系统应用程序，称为Windows（有人说这是比尔盖茨被苹果的Lisa计算机上市所刺激）。一开始Windows并不是一个操作系统，只是一个应用程序，其背景还是纯MS-DOS系统，这是因为当时的BIOS设计以及MS-DOS的架构不甚良好之故。在1990年代初，微软与IBM的合作破裂，微软从OS/2（早期为命令行模式，后来成为一个很成功但是曲高和寡的图形化操作系统）项目中抽身，并且在1993年7月27日推出Windows 3.1，一个以OS/2为基础的图形化操作系统。并在1995年8月15日推出Windows 95。直到这时，Windows系统依然是创建在MS-DOS的基础上，因此消费者莫不期待微软在2000年所推出的Windows 2000上，因为它才算是第一个脱离MS-DOS基础的图形化操作系统。
\paragraph{}
副系统架构第一个实现的副系统群当然是以前的微软系统。DOS副系统将每个DOS程序当成一进程运行，并以个别独立的MS-DOS虚拟机承载其运行环境。另外一个是Windows 3.1模拟系统，实际上是在Win32副系统下运行Win16程序。因此达到了安全掌控为MS-DOS与早期Windows系统所撰写之旧版程序的能力。然而此架构只在Intel 80386处理器及后继机型上实现。且某些会直接读取硬件的程序，例如大部分的Win16游戏，就无法套用这套系统，因此很多早期游戏便无法在Windows NT上运行。Windows NT有3.1、3.5、3.51与4.0版。Windows 2000是Windows NT的改进系列（事实上是Windows NT 5.0）、Windows XP（Windows NT 5.1）以及Windows Server 2003（Windows NT 5.2）与Windows Vista（Windows NT 6.0）也都是立基于Windows NT的架构上。
\paragraph{}
而本年代渐渐增长并越趋复杂的嵌入式设备市场也促使嵌入式操作系统的成长。
\section{操作系统的功能}
操作系统位于底层硬件与用户之间，是两者沟通的桥梁。用户可以通过操作系统的用户界面，输入命令。操作系统则对命令进行解释，驱动硬件设备，实现用户要求。以现代观点而言，一个标准个人计算机的OS应该提供以下的功能：

进程管理（Processing management）
记忆空间管理（Memory management）
文件系统（File system）
网络通信（Networking）
安全机制（Security）
用户界面（User interface）
驱动程序（Device drivers
\subsection{进程管理}
不管是常驻程序或者应用程序，他们都以进程为标准运行单位。当年运用冯·诺伊曼结构建造计算机时，每个中央处理器最多只能同时运行一个进程。早期的OS（例如DOS）也不允许任何程序打破这个限制，且DOS同时只有运行一个进程（虽然DOS自己宣称他们拥有终止并等待驻留（TSR）能力，可以部分且艰难地解决这问题）。现代的操作系统，即使只拥有一个CPU，也可以利用多进程（multitask）功能同时运行复数进程。进程管理指的是操作系统调整复数进程的功能。
由于大部分的计算机只包含一颗中央处理器，在单核心（Core）的情况下多进程只是简单迅速地切换各进程，让每个进程都能够运行，在多核心或多处理器的情况下，所有进程通过许多协同技术在各处理器或核心上转换。越多进程同时运行，每个进程能分配到的时间比率就越小。很多OS在遇到此问题时会出现诸如音效断续或鼠标跳格的情况（称做崩溃（Thrashing），一种OS只能不停运行自己的管理程序并耗尽系统资源的状态，其他用户或硬件的程序皆无法运行）。进程管理通常实践了分时的概念，大部分的OS可以利用指定不同的特权等级（priority），为每个进程改变所占的分时比例。特权越高的进程，运行优先级越高，单位时间内占的比例也越高。交互式OS也提供某种程度的回馈机制，让直接与用户交互的进程拥有较高的特权值。
\subsection{存储器管理}
根据帕金森定律：“你给程序再多存储器，程序也会想尽办法耗光”，因此程序员通常希望系统给他无限量且无限快的存储器。大部分的现代计算机存储器架构都是层次结构式的，最快且数量最少的暂存器为首，然后是高速缓存、存储器以及最慢的磁盘存储设备。而OS的存储器管理提供查找可用的记忆空间、配置与释放记忆空间以及交换存储器和低速存储设备的内含物……等功能。此类又被称做虚拟内存管理的功能大幅增加每个进程可获得的记忆空间（通常是4GB，既使实际上RAM的数量远少于这数目）。然而这也带来了微幅降低运行效率的缺点，严重时甚至也会导致进程崩溃。
存储器管理的另一个重点活动就是借由CPU的帮助来管理虚拟位置。如果同时有许多进程存储于记忆设备上，操作系统必须防止它们互相干扰对方的存储器内容（除非通过某些协议在可控制的范围下操作，并限制可访问的存储器范围）。分区存储器空间可以达成目标。每个进程只会看到整个存储器空间（从0到存储器空间的最大上限）被配置给它自己（当然，有些位置被OS保留而禁止访问）。CPU事先存了几个表以比对虚拟位置与实际存储器位置，这种方法称为标签页（paging）配置。
借由对每个进程产生分开独立的位置空间，OS也可以轻易地一次释放某进程所占据的所有存储器。如果这个进程不释放存储器，OS可以退出进程并将存储器自动释放。
\subsection{磁盘与文件系统}
所谓的文件系统，通常指称管理磁盘数据的系统，可将数据以目录或文件的型式存储。每个文件系统都有自己的特殊格式与功能，例如日志管理或不需磁盘重整。
OS拥有许多种自带文件系统。例如Linux拥有非常广泛的自带文件系统，如ext2、ext3、ext4、ReiserFS、Reiser4、GFS、GFS2、OCFS、OCFS2、NILFS与Google文件系统。Linux也支持非本地文件系统，例如XFS、JFS、FAT家族与NTFS。另一方面，Windows能支持的文件系统只有FAT12、FAT16、FAT32与NTFS。NTFS系统是Windows上最可靠与最有效率的文件系统。其他的FAT家族都比NTFS老旧，且对于文件长度与分区磁盘能力都有很大限制，因此造成很多问题。而UNIX的文件系统多半是UFS，而UNIX中的一个分支Solaris最近则开始支持一种新式的ZFS
大部份上述的文件系统都有两种建置方法。系统可以以日志式（Journaling file system）或非日志式建置。日志式文件系统可以以较安全的手法运行系统回复。如果一个没有日志式建置的文件系统遇上突然的系统崩溃，导致数据创建在一半时停顿，则此系统需要特殊的文件系统检查工具才能撤消；日志式则可自动回复。微软的NTFS与Linux的ext3、ext4、reiserFS与JFS都是日志式文件系统。
每个文件系统都实现相似的目录／子目录架构，但在相似之下也有许多不同点。微软使用“\”符号以创建目录／子目录关系，且文件名称忽略其大小写差异；UNIX系统则是以“/”创建目录架构，且文件名称大小写有差异。
\subsection{网络}
许多现代的OS都具备操作主流网络通信协议TCP/IP的能力。也就是说这样的操作系统可以进入网络世界，并且与其他系统分享诸如文件、打印机与扫描仪等资源。
许多OS也支持多个过去网络启蒙时代的各路网络通信协议，例如IBM创建的SNA、DEC在它所生产的系统所设置的DECnet架构与微软为Windows制作的特殊通信协议。还有许多为了特殊功能而研发的通信协议，例如可以在网络上提供文件访问功能的NFS系统。现今大量用于影音流（Streaming media）及游戏消息传送的UDP协议等。
\subsection{安全}
大多数OS都含有某种程度的信息安全机制。信息安全机制主要基于两大理念：
OS提供外界直接或间接访问数种资源的管道，例如本地端磁盘驱动器的文件、受保护的特权系统调用（System call）、用户的隐私数据与系统运行的程序所提供的服务。
OS有能力认证（Authorization）资源访问的请求。允许通过认证的请求并拒绝无法通过的非法请求，并将适当的权力授权（Authentication）给此请求。有些系统的认证机制仅简略地把资源分为特权或非特权，且每个请求都有独特的身份辨识号码，例如用户名称。资源请求通常分成两大种类：
内部来源：通常是一个正在运行的程序发出的资源请求。在某些系统上，一个程序一旦可运行就可做任何事情（例如DOS时代的病毒），但通常OS会给程序一个识别代号，并且在此程序发出请求时，检查其代号与所需资源的访问权限关系。
外部来源：从非本地端计算机而来的资源请求，例如远程登录本机计算机或某些网络连接请求（FTP或HTTP）。为了识别这些外部请求，系统也许会对此请求提出认证要求。通常是请求输入用户名称以及相对应的密码。系统有时也会应用诸如磁卡或生物识别数据的它种认证方法。在某些例子，例如网络通信上，通常不需通过认证即可访问资源（例如匿名访问的FTP服务器或P2P服务）。
除了允许／拒绝形式的安全机制，一个高安全等级的系统也会提供记录选项，允许记录各种请求对资源访问的行为（例如“谁曾经读了这个文件？”）。
肇因于军方与商业组织将敏感数据记录在计算机上，安全机制在OS历史上是一个被长久关注与讨论的问题。美国国防部（DoD）便创立了《可信赖之计算机系统评鉴程序》（TCSEC），此手册确立了评鉴安全机制成效的基本原则。这对OS作者来说非常重要，因为TCSEC是用于评鉴、分类与选拔出用于处理、存储与获取敏感或机密数据的计算机系统的标准程序。
\subsection{用户界面}
今日大部分的OS都包含图形用户界面。有几类较旧的OS将图形用户界面与核心紧密结合，例如最早的Windows与Mac OS实现产品。此种手法可提供较快速的图形回应能力，且实现时不需切割模块因而较为省工，但是会有强烈副作用，例如图形系统崩溃将导致整个系统崩溃，例如死亡蓝屏幕。许多近代的OS已模块化，将图形接口的副系统与核心分开（已知Linux与Mac OS X原先就是如此设计，而某些扩充版本的Windows终于也采用此手法）。
许多OS允许用户安装或创造任何他们喜欢的图形接口[6]。大部分的Unix与Unix派生系统（BSD、Linux与Minix）通常会安装X Window系统配合GNOME或KDE桌面环境。而某些OS就没有这么弹性的图形用户界面，例如Windows。这类的OS只能通过外加的程序来改变其图形用户界面，甚或根本只能改变诸如菜单风格或颜色配置等部分[来源请求]。
图形用户界面与时并进，例如Windows在每次新版本上市时就会将其图形用户界面改头换面，而Mac OS的GUI也在Mac OS X上市时出现重大转变。
\subsection{驱动程序}
所谓的驱动程序（Device driver）是指某类设计来与硬件交互的软件。通常是一设计完善的设备交互接口，利用与此硬件连接的计算机汇排流或通信子系统，提供对此设备下令与接收信息的功能；以及最终目的，将消息提供给OS或应用程序。驱动程序是针对特定硬件与特定OS设计的软件，通常以操作系统核心模块、应用软件包或普通计算机程序的形式在OS核心底下运行，以达到通透顺畅地与硬件交互的效果，且提供硬件在处理异步的时间依赖性接口（asynchronous time-dependent hardware interface）时所需的中断处理程序（Interrupt handler）。
设计驱动程序的主要目的在于操作抽象化，任何硬件模块，既使是同一类的设备，在硬件设计面上也有巨大差异。厂商推出的较新模块通常更可靠更有效率，控制方法也会有所不同。计算机与其OS每每不能预期那些现有与新设备的变异之处，因此无法知道其操作方法。为解决此问题OS通常会主动制订每种设备该有的操作方式，而驱动程序功能则是将那些OS制订的行为描述，转译为可让设备了解的自定义操作手法。
理论上适合的驱动程序一旦安装，相对应的新设备就可以无误地运行。此新驱动程序可以让此设备完美地切合在OS中，让用户察觉不到这是OS原本没有的功能。
\chapter{实现环境介绍}

在实现我们所设计的错做系统的时候。我们主要使用了nasm语言和c语言。其中使用nasm汇编语言完成大部分与硬件交互的代码，而使用c语言完成了一些比较靠上的服务，例如文件系统。并且在linux环境下使用bochs搭建了实验平台，方便测试和调试。
\section{开发工具}
\subsection{Bochs}
Bochs是一种十分轻便的使用c++编写的开源IA-32(x86)电脑模拟器，可以运行在最受欢迎的平台上。它仿真英特尔x86 CPU、常见的I/O设备、和定制的BIOS。目前，Bochs可以被编译仿真386、486、Pentium/PentiumII/PentiumIII/Pentium4或x86-64位的CPU，包括可选的MMX,SSEx和3DNow指令。在Bochs仿真环境里能够运行许多操作系统，比如Linux、DOS、Windows 95/98/NT/2000/XP或者Windows Vista。Bochs是由凯文·劳顿编写的，目前由“http://bochs.sourceforge.net”的Bochs项目组维护。
　　Bochs可以被编译运用在多种模式下，其中有些仍处于发展中。bochs的典型应用是提供x86 PC的完整仿真，包括x86处理器、硬件设备、和存储器。这让您在您的工作站上的模拟器里运行操作系统和软件，就像你有一台机器内的机器。例如，Bochs还将允许您在安装X11的Solaris机上运行windows应用程序。
　　Bochs的发布遵守GNU LGPL。
\subsection{Nasm}
NASM 是一个为可移植性与模块化而设计的一个 80x86 的汇编器。它支持相当多
的目标文件格式,包括 Linux 和'NetBSD/FreeBSD','a.out','ELF','COFF',微软 16
位的'OBJ'和'Win32'。它还可以输出纯二进制文件。它的语法设计得相当的简
洁易懂,和 Intel 语法相似但更简单。它支持'Pentium','P6','MMX','3DNow!',
'SSE' and 'SSE2'指令集.
\subsection{Gcc}
Linux系统下的gcc（GNU C Compiler）是GNU推出的功能强大、性能优越的多平台编译器，是GNU的代表作品之一。gcc是可以在多种硬体平台上编译出可执行程序的超级编译器，其执行效率与一般的编译器相比平均效率要高20%~30%。
\section{开发环境}
\subsection{Linux}
Linux ，是一 类Unix 计算机作业系统 的统称。 该作业系统的核心的名字也是「 Linux 」。 Linux作业系统也是 自由软体 和 开放原始码 发展中最著名的例子。
严格来讲，Linux这个词本身只表示 Linux核心 ，但在实际上人们已经习惯了用Linux来形容整个基于Linux核心，并且使用 GNU工程 各种工具和资料库的作业系统（也被称为 GNU/Linux ）。 基于这些组件的Linux软件被称为 Linux发行版 。 一般来讲，一个Linux发行套件包含大量的软件，比如 软件开发 工具、 资料库 （例如 PostgreSQL 、 MySQL ）、 网路伺服器 （例如 Apache ）、 X Window 、桌面环境（例如 GNOME 和 KDE ）、办公套件（例如 OpenOffice.org ）、脚本语言（例如 Perl 、 PHP 和 Python ）等等。
Linux核心最初是为 英特尔 386 微处理器 设计的。 现在Linux核心支援从 个人电脑 到 大型主机 甚至包括 嵌入式系统 在内的各种硬件设备。
现在，Linux已经成为了一种受到广泛关注和支持的作业系统。 包括 国际商用机器公司 和 惠普 、 戴尔 在内的一些资讯业巨头也陆续支援Linux，并且成立了一些组织支持其发展，如 Open Invention Network（OIN） （成员有IBM、 索尼 、 NEC 、Philips、Novell和Red Hat等）购买了 微软 专利 ，允许任何个体以开放的原则使用。 很多人认为，和微软的 Windows 相比，作为自由软件的Linux具有低软体成本、高安全性且可更加信赖等优势，但是同时却需要更多的人力成本。
